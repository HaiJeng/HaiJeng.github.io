<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rp++</title>
    <link>https://haijeng.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>我想刷穿一个OJ</description>
    <pubDate>Sat, 31 Aug 2019 11:37:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Rolling The Polygon</title>
      <link>https://haijeng.github.io/2019/08/31/Rolling-The-Polygon/</link>
      <guid>https://haijeng.github.io/2019/08/31/Rolling-The-Polygon/</guid>
      <pubDate>Sat, 31 Aug 2019 11:26:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2018-2019-ACM-ICPC-China-Multi-Provincial-Collegiate-Programming-Contest&quot;&gt;&lt;a href=&quot;#2018-2019-ACM-ICPC-China-Multi-Provincial-Colleg
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="2018-2019-ACM-ICPC-China-Multi-Provincial-Collegiate-Programming-Contest"><a href="#2018-2019-ACM-ICPC-China-Multi-Provincial-Collegiate-Programming-Contest" class="headerlink" title="2018-2019 ACM-ICPC, China Multi-Provincial Collegiate Programming Contest"></a>2018-2019 ACM-ICPC, China Multi-Provincial Collegiate Programming Contest</h1><h1 id="The-2018-2019-Asia-Yinchuan-First-Round-Online-Programming"><a href="#The-2018-2019-Asia-Yinchuan-First-Round-Online-Programming" class="headerlink" title="The 2018/2019 Asia Yinchuan First Round Online Programming"></a>The 2018/2019 Asia Yinchuan First Round Online Programming</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>一个凸包,凸包上有一个点$G$<br>在水平面上滚动凸包,问点$G$的滚动轨迹长度是多少.</p><p>画一个图<br><img src="https://i.loli.net/2019/08/31/9lrO8fzWa7igckJ.png" alt="1.png"><br>即求弧长$HH’$<br>显然~$∠ABN=∠HBH’=∠CBI$<br>那么,求$∠ABN$就相当于求$\pi-∠ABC$<br>至于$∠ABC$怎么求,就很显然啦.</p><div><div class="fold_hider"><div class="close hider_title">点击查看代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1.0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">vec</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> <span class="comment">//点的基本数据结构</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>)</span><br><span class="line">        : x(_x)</span><br><span class="line">        , y(_y)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * i_T.x, y * i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * u, y * u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == i_T.x &amp;&amp; y == i_T.y;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x / u, y / u);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + i_T.x, y + i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x - i_T.x, y - i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point a, point b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.y == b.y ? a.x &lt; b.x : a.y &lt; b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a.x &lt;&lt; ' ' &lt;&lt; a.y;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8f %.8f"</span>, a.x, a.y);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        in &gt;&gt; a.x &gt;&gt; a.y;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">changdu</span><span class="params">(vec a)</span> <span class="comment">//向量长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(a.x * a.x + a.y * a.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dianji</span><span class="params">(vec A, vec B)</span> <span class="comment">//点积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x * B.x + A.y * B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">jiajiao</span><span class="params">(vec a, vec b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pi - <span class="built_in">acos</span>(dianji(a,b) / (changdu(a) * changdu(b)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point p0;</span><br><span class="line">    <span class="keyword">int</span> n, t, cas = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= t; k++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            p[i].d = changdu(p0 - p[i]);</span><br><span class="line">        p[<span class="number">0</span>] = p[n], p[n + <span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            ans += p[i].d * jiajiao(p[i - <span class="number">1</span>]- p[i], p[i + <span class="number">1</span>]-p[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %.3f\n"</span>, k, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/08/31/Rolling-The-Polygon/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算几何模板</title>
      <link>https://haijeng.github.io/2019/08/28/AOJ-CGL/</link>
      <guid>https://haijeng.github.io/2019/08/28/AOJ-CGL/</guid>
      <pubDate>Wed, 28 Aug 2019 08:11:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;计算几何模板&quot;&gt;&lt;a href=&quot;#计算几何模板&quot; class=&quot;headerlink&quot; title=&quot;计算几何模板&quot;&gt;&lt;/a&gt;计算几何模板&lt;/h2&gt;&lt;p&gt;&lt;font color=&quot;blue&quot;&gt;正如不知何方大佬所言,计算几何精妙之处,就是不用解析几何的方法去做&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="计算几何模板"><a href="#计算几何模板" class="headerlink" title="计算几何模板"></a>计算几何模板</h2><p><font color="blue">正如不知何方大佬所言,计算几何精妙之处,就是不用解析几何的方法去做</font><br><font color="blue">为了方便查找,防止自己迷路,我把函数名都写成了拼音</font><br><font color="blue">绝对不是因为我英语不好!!!</font></p><h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><h4 id="点和向量"><a href="#点和向量" class="headerlink" title="点和向量:"></a>点和向量:</h4><ul><li>点和向量都可以用一个坐标$(x,y)$来表示.</li><li>故向量$Vector$可以写为</li><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">vec</span>;</span></span><br></pre></td></tr></table></figure></li></ul><p>完整定义如下</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">vec</span>;</span>  <span class="comment">//向量vec</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span>    <span class="comment">//点的基本数据结构</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    point(<span class="keyword">double</span> _x=<span class="number">0</span>, <span class="keyword">double</span> _y=<span class="number">0</span>):</span><br><span class="line">    x(_x),y(_y)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * i_T.x, y * i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * u, y * u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == i_T.x &amp;&amp; y == i_T.y;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x / u, y / u);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + i_T.x, y + i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x - i_T.x, y - i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point a, point b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.y == b.y ? a.x &lt; b.x : a.y &lt; b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a.x &lt;&lt; ' ' &lt;&lt; a.y;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8f %.8f"</span>, a.x, a.y);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        in &gt;&gt; a.x &gt;&gt; a.y;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><h4 id="直线和线段"><a href="#直线和线段" class="headerlink" title="直线和线段:"></a>直线和线段:</h4><ul><li>直线和线段都可以用两个点的坐标来表示</li><li>故线段$Segment$可以写为</li><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Line</span> <span class="title">Segment</span>;</span></span><br></pre></td></tr></table></figure></li></ul><p>完整定义如下</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Line</span> <span class="title">Segment</span>;</span>   <span class="comment">//线段Segment</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span>       <span class="comment">//直线</span></span><br><span class="line">    vec a, b;</span><br><span class="line">    Line(point _a = point(), point _b = point())</span><br><span class="line">        : a(_a)</span><br><span class="line">        , b(_b)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, Line&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a.a &gt;&gt; a.b;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Line&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        out &lt;&lt; a.a &lt;&lt; <span class="string">' '</span> &lt;&lt; a.b;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><h4 id="圆"><a href="#圆" class="headerlink" title="圆:"></a>圆:</h4><ul><li>圆的表示有一个点圆心,以及其半径组成</li></ul><p>完整定义如下</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cirles</span> &#123;</span></span><br><span class="line">    point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    cirles(point _o = point(), <span class="keyword">double</span> _r = <span class="number">0.0</span>)</span><br><span class="line">        : r(_r)</span><br><span class="line">        , o(_o)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">point <span class="title">Point</span><span class="params">(<span class="keyword">double</span> t)</span> <span class="comment">//圆上任意一点</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(o.x + r * <span class="built_in">cos</span>(t), o.y + r * <span class="built_in">sin</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, cirles&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        in &gt;&gt; a.o &gt;&gt; a.r;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, cirles&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        out &lt;&lt; a.o &lt;&lt; <span class="string">' '</span> &lt;&lt; a.r;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><h3 id="基本函数以及常量"><a href="#基本函数以及常量" class="headerlink" title="基本函数以及常量"></a>基本函数以及常量</h3><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhengfu</span><span class="params">(<span class="keyword">double</span> d)</span>   <span class="comment">//判断正负,即sign/dcmp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(d) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bijiao</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span>  <span class="comment">//判断x和y的大小关系</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dayu_dengyu</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> <span class="comment">//x&gt;=y否?</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps || x &gt; y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">chaji</span><span class="params">(vec A, vec B)</span>  <span class="comment">//求向量叉积,即cross</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x; <span class="comment">// 正为A-&gt;B左旋</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xuanzhuan</span><span class="params">(point a, point b, point c)</span>   <span class="comment">//求三点叉积,即side</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chaji(b - a, c - a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vec a, vec b)</span> <span class="comment">//极角排序,运用叉积的极角排序,相比于atan2慢,但是精度高</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vec <span class="title">c</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (chaji(a - c, b - c) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">return</span> chaji(a - c, b - c) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dianji</span><span class="params">(vec A, vec B)</span> <span class="comment">//点积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x * B.x + A.y * B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">changdu</span><span class="params">(vec a)</span> <span class="comment">//向量长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(a.x * a.x + a.y * a.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="AOJ相关习题"><a href="#AOJ相关习题" class="headerlink" title="AOJ相关习题"></a>AOJ相关习题</h2><h3 id="CGL-1-A-Projection"><a href="#CGL-1-A-Projection" class="headerlink" title="CGL_1_A:Projection"></a>CGL_1_A:Projection</h3><p>求一个点在向量$\overrightarrow{ab}$上的投影坐标<br>设点$c$,投影在$\overrightarrow{ab}$上为$c’$,则$c’$的坐标就是:$cos&lt;\overrightarrow{ac},\overrightarrow{ab}&gt;\times |\overrightarrow{ac}|+a$</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">point <span class="title">touying</span><span class="params">(Line l, point c)</span> <span class="comment">//c投影在直线ab上的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec A = l.b - l.a;</span><br><span class="line">    vec B = c - l.a;</span><br><span class="line">    <span class="keyword">double</span> La = changdu(A);</span><br><span class="line">    <span class="keyword">double</span> Lc = dianji(A, B) / (La * La);</span><br><span class="line">    <span class="keyword">return</span> A * Lc + l.a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-1-B-Reflection"><a href="#CGL-1-B-Reflection" class="headerlink" title="CGL_1_B:Reflection"></a>CGL_1_B:Reflection</h3><p>求一个点$c$关于向量$\overrightarrow{ab}$的对称点$c’’$<br>先求出$c$在$ab$上的投影,那么$c’’=2\times \overrightarrow{cc’}+c$</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">point <span class="title">fanshe</span><span class="params">(Line l, point c)</span> <span class="comment">//求c关于直线ab的对称点c'</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point A = touying(l, c);</span><br><span class="line">    <span class="keyword">return</span> (A - c) * <span class="number">2.0</span> + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-1-C-Counter-Clockwise"><a href="#CGL-1-C-Counter-Clockwise" class="headerlink" title="CGL_1_C:Counter-Clockwise"></a>CGL_1_C:Counter-Clockwise</h3><p>就是..根据图中的判断就是了</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Counter_Clockwise</span><span class="params">(point p,point p1,point p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (zhengfu(chaji(p2 - p1, p - p1)) == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"COUNTER_CLOCKWISE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(chaji(p2 - p1, p - p1)) == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"CLOCKWISE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zhengfu(dianji(p2 - p1, p - p1)) == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"ONLINE_BACK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">double</span> j = changdu(p2 - p1);</span><br><span class="line">                <span class="keyword">double</span> k = changdu(p - p1);</span><br><span class="line">                <span class="keyword">if</span> (bijiao(j, k) &gt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ON_SEGMENT"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ONLINE_FRONT"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-2-A-Parallel-Orthogonal"><a href="#CGL-2-A-Parallel-Orthogonal" class="headerlink" title="CGL_2_A:Parallel/Orthogonal"></a>CGL_2_A:Parallel/Orthogonal</h3><p>先判平行,再用点积判垂直</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pingxing</span><span class="params">(vec a,vec b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bijiao(a.x*b.y,a.y*b.x)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Parallel/Orthogonal(Line l1,Line l2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (pingxing(l1.b-l1.a,l2.b-l2.a))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(dianji(l1.b-l1.a,l2.b-l2.a))==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-2-B-Intersection"><a href="#CGL-2-B-Intersection" class="headerlink" title="CGL_2_B:Intersection"></a>CGL_2_B:Intersection</h3><p>线段相交要考虑蛮多的,首先,先按照x后y从小到大排一下.<br>最简单的情况,$ab$穿过$cd$,那么必定有交点.<br>第二种,$a$在$cd$上或者$b$在$cd$上<br>第三种,共线时,$a$在$cd$之间或$b$在$cd$之间.<br>处理好以上问题,就解决了</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bijiao3</span><span class="params">(vec a, vec b, vec c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x &lt;= c.x &amp;&amp; c.x &lt;= b.x &amp;&amp; ((a.y &lt;= c.y &amp;&amp; c.y &lt;= b.y || b.y &lt;= c.y &amp;&amp; c.y &lt;= a.y)))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">xianduan_xiangjiao</span><span class="params">(Segment l1,Segment l2)</span> <span class="comment">//两线段是否有交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1.a.x == l1.b.x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.a.y &gt; l1.b.y)</span><br><span class="line">            swap(l1.a, l1.b);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.a.x &gt; l1.b.x)</span><br><span class="line">        swap(l1.a, l1.b);</span><br><span class="line">    <span class="keyword">if</span> (l2.a.x == l2.b.x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l2.a.y &gt; l2.b.y)</span><br><span class="line">            swap(l2.a, l2.b);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2.a.x &gt; l2.b.x)</span><br><span class="line">        swap(l2.a, l2.b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> c1 = chaji(l1.b - l1.a, l2.a - l1.a), d1 = chaji(l1.b - l1.a, l2.b - l1.a);</span><br><span class="line">    <span class="keyword">double</span> c2 = chaji(l2.b - l2.a, l1.a - l2.a), d2 = chaji(l2.b - l2.a, l1.b - l2.a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (zhengfu(c1 * d1) &lt; <span class="number">0</span> &amp;&amp; zhengfu(c2 * d2) &lt; <span class="number">0</span>) <span class="comment">//ab横穿cd</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(c1 * d1) != <span class="number">0</span> &amp;&amp; zhengfu(c2 * d2) == <span class="number">0</span>) &#123; <span class="comment">//ab不穿过cd</span></span><br><span class="line">        <span class="keyword">if</span> (zhengfu(c2) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bijiao3(l2.a, l2.b, l1.a))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(d2) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (bijiao3(l2.a, l2.b, l1.b))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(c1 * d1) == <span class="number">0</span> &amp;&amp; zhengfu(c2 * d2) != <span class="number">0</span>) &#123; <span class="comment">//cd不穿过ab</span></span><br><span class="line">        <span class="keyword">if</span> (c1 == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (bijiao3(l1.a, l1.b, l2.a))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (d1 == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (bijiao3(l1.a, l1.b, l2.b))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(c1 * d1) == <span class="number">0</span> &amp;&amp; zhengfu(c2 * d2) == <span class="number">0</span>) &#123; <span class="comment">//平行</span></span><br><span class="line">        <span class="keyword">if</span> (l1.a == l2.a || l1.a == l2.b || l1.b == l2.a || l1.b == l2.b)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (bijiao3(l1.a, l1.b, l2.a) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (bijiao3(l2.a, l2.b, l1.a) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-2-C-Cross-Point"><a href="#CGL-2-C-Cross-Point" class="headerlink" title="CGL_2_C:Cross Point"></a>CGL_2_C:Cross Point</h3><p>给你两个必定相交的线段,求交点</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">point <span class="title">xianduan_jiaodian</span><span class="params">(Segment l1,Segment l2)</span><span class="comment">//两线段交点</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">double</span> tmpLeft, tmpRight, x = inf, y = inf;</span><br><span class="line">    <span class="keyword">if</span> (xianduan_xiangjiao(l1,l2)) &#123;</span><br><span class="line">        tmpLeft = (l2.b.x - l2.a.x) * (l1.a.y - l1.b.y) - (l1.b.x - l1.a.x) * (l2.a.y - l2.b.y);</span><br><span class="line">        tmpRight = (l1.a.y - l2.a.y) * (l1.b.x - l1.a.x) * (l2.b.x - l2.a.x) + l2.a.x * (l2.b.y - l2.a.y) * (l1.b.x - l1.a.x) - l1.a.x * (l1.b.y - l1.a.y) * (l2.b.x - l2.a.x);</span><br><span class="line"></span><br><span class="line">        x = tmpRight / tmpLeft;</span><br><span class="line"></span><br><span class="line">        tmpLeft = (l1.a.x - l1.b.x) * (l2.b.y - l2.a.y) - (l1.b.y - l1.a.y) * (l2.a.x - l2.b.x);</span><br><span class="line">        tmpRight = l1.b.y * (l1.a.x - l1.b.x) * (l2.b.y - l2.a.y) + (l2.b.x - l1.b.x) * (l2.b.y - l2.a.y) * (l1.a.y - l1.b.y) - l2.b.y * (l2.a.x - l2.b.x) * (l1.b.y - l1.a.y);</span><br><span class="line">        y = tmpRight / tmpLeft;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> point(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-2-D-Distance"><a href="#CGL-2-D-Distance" class="headerlink" title="CGL_2_D:Distance"></a>CGL_2_D:Distance</h3><ul><li>给定两个不相交线段,求两个线段最近距离</li><li>很明显,最近距离就是两个端点到另一个线段的距离.</li><li>那么两遍点到线段距离就出来了.<ul><li>点到线段距离有三种</li><li>第一种是点在线段正上方,则距离为过点向线段作垂线</li><li>第二种是点在左侧,就是左端点和该点连线</li><li>第三种同第二种,不过在右侧</li></ul></li></ul><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dian_dao_xianduan</span><span class="params">(Segment l, point c)</span> <span class="comment">//点到线段的距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> L = changdu(l.b - l.a);</span><br><span class="line">    <span class="keyword">double</span> r = dianji(l.b - l.a, c - l.a) / (L * L);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zhengfu(r) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> changdu(c - l.a);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dayu_dengyu(r, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> changdu(c - l.b);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">double</span> L = r * changdu(l.b - l.a), l2 = changdu(c - l.a);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(l2 * l2 - L * L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xianduanjuli</span><span class="params">(Segment l1,Segment l2)</span> <span class="comment">//两线段距离</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xianduan_xiangjiao(l1,l2))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> minn = inf;</span><br><span class="line">    <span class="keyword">double</span> l = dian_dao_xianduan(l1, l2.a);</span><br><span class="line">    minn = dayu_dengyu(minn, l) ? l : minn;</span><br><span class="line">    l = dian_dao_xianduan(l1, l2.b);</span><br><span class="line">    minn = dayu_dengyu(minn, l) ? l : minn;</span><br><span class="line">    l = dian_dao_xianduan(l2, l1.a);</span><br><span class="line">    minn = dayu_dengyu(minn, l) ? l : minn;</span><br><span class="line">    l = dian_dao_xianduan(l2, l1.b);</span><br><span class="line">    minn = dayu_dengyu(minn, l) ? l : minn;</span><br><span class="line">    <span class="keyword">return</span> minn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-3-A-Area"><a href="#CGL-3-A-Area" class="headerlink" title="CGL_3_A:Area"></a>CGL_3_A:Area</h3><p>计算多边形面积的方法蛮多的.<br>最暴力的当属以原点和多边形临近两点构成三角形,然后计算三角形的有向面积.<br>多边形内外符号不同,最后留下的就是多边形面积,然后fabs一下就完事了.这个地方建议”脑洞大开”或者拿纸画画.<br>不过要是会三角剖分的话,把多边形按顶点分割成一堆三角形,然后求面积也阔以.</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">double duobianxingmianji(int n) //多边形面积</span><br><span class="line">&#123;</span><br><span class="line">    double ans = 0;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        ans += chaji(p[i], p[(i + 1) % n]);</span><br><span class="line">    ans = fabs(ans) * 0.5;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-3-B-Is-Convex"><a href="#CGL-3-B-Is-Convex" class="headerlink" title="CGL_3_B:Is-Convex"></a>CGL_3_B:Is-Convex</h3><p>问所给的多边形是不是凸的.<br>题目给的方法是计算内角和.<br>嘛,感觉好麻烦的亚子.<br>还不如暴力求个凸包,看看所给的多边形的点数是不是和凸包点数相同来的快.</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Andrew</span><span class="params">(<span class="keyword">int</span>&amp; tail)</span>  <span class="comment">//求凸包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    tail = <span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; <span class="number">1</span> &amp;&amp; xuanzhuan(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> basic = tail;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; basic &amp;&amp; xuanzhuan(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-3-C-Polygon-Point-Containment"><a href="#CGL-3-C-Polygon-Point-Containment" class="headerlink" title="CGL_3_C:Polygon-Point Containment"></a>CGL_3_C:Polygon-Point Containment</h3><p>就,判断点和多边形的位置关系.<br>看网上都是角度和或者射线法.<br>结果就让我找到一个看起来很$nb$的象限角度法?<br>不用考虑角度的精度问题,还不用像射线法考虑多??</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">zaibianshang</span><span class="params">(point&amp; t,<span class="keyword">int</span> n)</span> <span class="comment">//点在多边形边上否</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span> (dian_zai_xianshang(Line(p[i], p[(i + <span class="number">1</span>)%n]), t))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duobianxingnei</span><span class="params">(point&amp; t,<span class="keyword">int</span> n)</span> <span class="comment">//点在多边形内</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1, t2, sum, i;</span><br><span class="line">    <span class="keyword">double</span> f;</span><br><span class="line">    p[<span class="number">0</span>] = p[n];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        p[i] = p[i] - t; <span class="comment">// 坐标平移</span></span><br><span class="line">    t1 = p[<span class="number">0</span>].x &gt;= <span class="number">0</span> ? (p[<span class="number">0</span>].y &gt;= <span class="number">0</span> ? <span class="number">0</span> : <span class="number">3</span>) : (p[<span class="number">0</span>].y &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">2</span>); <span class="comment">// 计算象限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (sum = <span class="number">0</span>, i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(p[i].x)&lt;eps &amp;&amp; <span class="built_in">fabs</span>(p[i].y)&lt;eps)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 被测点为多边形顶点</span></span><br><span class="line">        f = chaji(p[i - <span class="number">1</span>], p[i - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算叉积</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(f)&lt;eps &amp;&amp; p[i - <span class="number">1</span>].x * p[i].x &lt;= <span class="number">0</span> &amp;&amp; p[i - <span class="number">1</span>].y * p[i].y &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 点在边上</span></span><br><span class="line">        t2 = p[i].x &gt;= <span class="number">0</span> ? (p[i].y &gt;= <span class="number">0</span> ? <span class="number">0</span> : <span class="number">3</span>) : (p[i].y &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">2</span>); <span class="comment">// 计算象限</span></span><br><span class="line">        <span class="keyword">if</span> (t2 == (t1 + <span class="number">1</span>) % <span class="number">4</span>)</span><br><span class="line">            sum += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 情况1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t2 == (t1 + <span class="number">3</span>) % <span class="number">4</span>)</span><br><span class="line">            sum -= <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 情况2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t2 == (t1 + <span class="number">2</span>) % <span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 情况3</span></span><br><span class="line">            <span class="keyword">if</span> (f &gt; <span class="number">0</span>)</span><br><span class="line">                sum += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sum -= <span class="number">2</span>;</span><br><span class="line">        t1 = t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> tf = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= n || sum)</span><br><span class="line">        tf = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        p[i] = p[i] + t; <span class="comment">// 恢复坐标</span></span><br><span class="line">    <span class="keyword">return</span> tf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-4-A-Convex-Hull"><a href="#CGL-4-A-Convex-Hull" class="headerlink" title="CGL_4_A:Convex Hull"></a>CGL_4_A:Convex Hull</h3><p>就是…求凸包<br>这里有个蛋疼的地方,要求是先排y再排x</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Andrew</span><span class="params">(<span class="keyword">int</span>&amp; tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    tail = <span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; <span class="number">1</span> &amp;&amp; xuanzhuan(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> basic = tail;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; basic &amp;&amp; xuanzhuan(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-4-B-Diameter-of-a-Convex-Polygon"><a href="#CGL-4-B-Diameter-of-a-Convex-Polygon" class="headerlink" title="CGL_4_B:Diameter of a Convex Polygon"></a>CGL_4_B:Diameter of a Convex Polygon</h3><p>找到凸包距离最远的一对点.<br>就是旋转卡壳嘛.$O(n)$复杂度嘛.</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">tubao_zhijing</span><span class="params">(<span class="keyword">int</span> tail)</span> <span class="comment">//求出凸包直径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tail == <span class="number">2</span>) <span class="comment">//仅有两个点</span></span><br><span class="line">        <span class="keyword">return</span> changdu(q[<span class="number">2</span>] - q[<span class="number">1</span>]);</span><br><span class="line">    q[<span class="number">0</span>] = q[tail]; <span class="comment">//把最后的点放到最前面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">2</span>; i &lt; tail; i++) <span class="comment">//枚举边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (xuanzhuan(q[i], q[i + <span class="number">1</span>], q[j]) &lt; xuanzhuan(q[i], q[i + <span class="number">1</span>], q[j + <span class="number">1</span>]))</span><br><span class="line">            j = (j + <span class="number">1</span>) % tail;</span><br><span class="line">        re = max(re, max(changdu(q[j] - q[i]), changdu(q[j] - q[i + <span class="number">1</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-4-C-Convex-Cut"><a href="#CGL-4-C-Convex-Cut" class="headerlink" title="CGL_4_C:Convex Cut"></a>CGL_4_C:Convex Cut</h3><p>用一条直线切割凸包,输出得到图形的坐标.<br>就是逆时针找交点,按照直线的方向,$\overrightarrow{p_1p_2}$,先放入靠近$p_2$的点,然后按照叉积,向左旋转的放入点.</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhixian_xianduan_xiangjiao</span><span class="params">(Line l1, Segment l2)</span> <span class="comment">//直线与线段是否有交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1 = chaji(l1.b - l1.a, l2.a - l1.a), d1 = chaji(l1.b - l1.a, l2.b - l1.a);</span><br><span class="line">    <span class="keyword">if</span> (zhengfu(c1) == <span class="number">0</span> &amp;&amp; zhengfu(d1) == <span class="number">0</span>) &#123; <span class="comment">//重合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(c1 * d1) &lt;= <span class="number">0</span>) <span class="comment">//有交点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//平行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qiegetubao</span><span class="params">(Line l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = q[n];</span><br><span class="line">    <span class="keyword">int</span> tf = <span class="number">-1</span>, x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(xuanzhuan(l.a,l.b,q[i])) == <span class="number">1</span>)</span><br><span class="line">            p[++tail] = q[i];</span><br><span class="line">        <span class="keyword">int</span> f = zhixian_xianduan_xiangjiao(l,Segment( q[i], q[i + <span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">1</span>) &#123;</span><br><span class="line">            tf = <span class="number">1</span>;</span><br><span class="line">            p[++tail] = zhixian_xianduan_jiaodian(l, Segment(q[i], q[i + <span class="number">1</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f == <span class="number">-1</span>) &#123;</span><br><span class="line">            tf = <span class="number">0</span>;</span><br><span class="line">            x = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tf == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;q[x+1]&lt;&lt;' '&lt;&lt;q[x]&lt;&lt;' '&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span> (zhengfu(dianji(l.b - l.a, q[x + <span class="number">1</span>] - q[x])) == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, <span class="number">0.0</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                p[i] = q[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, duobianxingmianji(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*for (int i = 1; i &lt;= tail; i++)</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; p[i] &lt;&lt; endl;*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, duobianxingmianji(tail));</span><br><span class="line">    &#125;</span><br><span class="line">    q[<span class="number">0</span>] = point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-5-A-Closest-Pair"><a href="#CGL-5-A-Closest-Pair" class="headerlink" title="CGL_5_A:Closest Pair"></a>CGL_5_A:Closest Pair</h3><p>在空间内找到最近的点对<br>分治,建议到洛谷上搜索”平面最近点对(加强版)”</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ans = solve(l, mid);</span><br><span class="line">    ans = min(ans, solve(mid + <span class="number">1</span>, r));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(p[mid].x - p[i].x) &lt;= ans)</span><br><span class="line">            temp[tot++] = p[i];</span><br><span class="line"></span><br><span class="line">    sort(temp,temp+tot, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;tot; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp[j].y - temp[i].y &gt; ans)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ans = min(ans, changdu(temp[j] - temp[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-6-A-Segment-Intersections-Manhattan-Geometry"><a href="#CGL-6-A-Segment-Intersections-Manhattan-Geometry" class="headerlink" title="CGL_6_A:Segment Intersections: Manhattan Geometry"></a>CGL_6_A:Segment Intersections: Manhattan Geometry</h3><p>扫描线算法,例题可在洛谷上搜索”扫描线”<br>求平面$n$条线段的交点个数.<br>有空单开一章来整理这个算法.</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    ll len;</span><br><span class="line">    <span class="comment">//  sum: 被完全覆盖的次数；</span></span><br><span class="line">    <span class="comment">//  len: 区间内被截的长度。</span></span><br><span class="line">&#125; tree[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[x].l = l, tree[x].r = r;</span><br><span class="line">    tree[x].len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build_tree(lson(x), l, mid);</span><br><span class="line">    build_tree(rson(x), mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[x].len = tree[x &lt;&lt; <span class="number">1</span>].len + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    <span class="comment">//      合并儿子信息</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit_tree</span><span class="params">(<span class="keyword">int</span> x, ll id, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = tree[x].l, r = tree[x].r;</span><br><span class="line">    <span class="keyword">if</span> (l == id &amp;&amp; id == r) &#123;</span><br><span class="line">        tree[x].len += c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (id &lt;= mid)</span><br><span class="line">        edit_tree(lson(x), id, c);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        edit_tree(rson(x), id, c);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = tree[x].l, r = tree[x].r;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        <span class="keyword">return</span> tree[x].len;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid)</span><br><span class="line">        res += query(lson(x), L, R);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid)</span><br><span class="line">        res += query(rson(x), L, R);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Line&gt; l;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; X;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        point a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a.x != b.x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.x &gt; b.x)</span><br><span class="line">                swap(a, b);</span><br><span class="line">            X.push_back(a.x), X.push_back(b.x);</span><br><span class="line">            l.push_back(Line(a, b, <span class="number">2</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.y &gt; b.y)</span><br><span class="line">                swap(a, b);</span><br><span class="line">            X.push_back(a.x);</span><br><span class="line">            l.push_back(Line(a, a, <span class="number">1</span>));</span><br><span class="line">            l.push_back(Line(b, b, <span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    sort(l.begin(), l.end());</span><br><span class="line">    sort(X.begin(), X.end());</span><br><span class="line"> </span><br><span class="line">    n = unique(X.begin(), X.end()) - X.begin(); <span class="comment">//去重</span></span><br><span class="line">    X.erase(X.begin() + n, X.end());</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    build_tree(<span class="number">1</span>, <span class="number">1</span>, n); <span class="comment">//根据X[]的坐标建立线段树</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l[i].mark!=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = lower_bound(X.begin(), X.end(), l[i].a.x) - X.begin();</span><br><span class="line">            <span class="keyword">int</span> c = l[i].mark == <span class="number">3</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">            edit_tree(<span class="number">1</span>, id+<span class="number">1</span>, c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> id1 = lower_bound(X.begin(), X.end(), l[i].a.x) - X.begin();</span><br><span class="line">            <span class="keyword">int</span> id2 = lower_bound(X.begin(), X.end(), l[i].b.x) - X.begin();</span><br><span class="line">            ans += query(<span class="number">1</span>, id1+<span class="number">1</span>, id2+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-7-A-Intersection"><a href="#CGL-7-A-Intersection" class="headerlink" title="CGL_7_A:Intersection"></a>CGL_7_A:Intersection</h3><p>求圆的切线个数</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yuan_yuan_xiangjiao</span><span class="params">(cirles a, cirles b)</span> <span class="comment">//询问圆和圆的切线个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> l = changdu(b.o - a.o);</span><br><span class="line">    <span class="keyword">if</span> (bijiao(l, a.r + b.r) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (bijiao(l, a.r + b.r) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bijiao(l + min(a.r, b.r), max(a.r, b.r)) == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (bijiao(l + min(a.r, b.r), max(a.r, b.r)) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-7-D-Cross-Points-of-a-Circle-and-a-Line"><a href="#CGL-7-D-Cross-Points-of-a-Circle-and-a-Line" class="headerlink" title="CGL_7_D:Cross Points of a Circle and a Line"></a>CGL_7_D:Cross Points of a Circle and a Line</h3><p>求圆和直线的交点.<br>建议阅读”挑战程序设计竞赛2”</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;point, point&gt; zhixian_yuan_jiaodian(Line l, cirles a) <span class="comment">//求直线与圆交点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (dayu_dengyu(a.r, zhixian_yuanxin_juli(l, a))) &#123;</span><br><span class="line">        vec a_i = touying(l, a.o);</span><br><span class="line">        <span class="keyword">double</span> L = changdu(l.b - l.a);</span><br><span class="line">        <span class="keyword">double</span> lt = changdu(a.o - a_i);</span><br><span class="line">        <span class="keyword">double</span> lr = <span class="built_in">sqrt</span>(a.r * a.r - lt * lt);</span><br><span class="line">        vec p = (l.b - l.a) / L * lr + a_i;</span><br><span class="line">        <span class="keyword">return</span> make_pair(a_i - (l.b - l.a) / L * lr, a_i + (l.b - l.a) / L * lr);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> make_pair(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-7-E-Cross-Points-of-Circles"><a href="#CGL-7-E-Cross-Points-of-Circles" class="headerlink" title="CGL_7_E:Cross Points of Circles"></a>CGL_7_E:Cross Points of Circles</h3><p>求两个圆交点<br>建议阅读”挑战程序设计竞赛2”</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;vec, vec&gt; yuan_yuan_jiaodian(cirles a, cirles b) <span class="comment">//求圆和圆的交点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> l = changdu(a.o - b.o);</span><br><span class="line">    <span class="keyword">double</span> x = <span class="built_in">acos</span>((a.r * a.r + l * l - b.r * b.r) / (<span class="number">2.0</span> * a.r * l));</span><br><span class="line">    <span class="keyword">double</span> t = <span class="built_in">atan2</span>((b.o - a.o).y, (b.o - a.o).x);</span><br><span class="line">    <span class="keyword">return</span> make_pair(a.o + vec(<span class="built_in">cos</span>(t - x) * a.r, <span class="built_in">sin</span>(t - x) * a.r), a.o + vec(<span class="built_in">cos</span>(x + t) * a.r, <span class="built_in">sin</span>(t + x) * a.r));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-7-F-Tangent-to-a-Circle"><a href="#CGL-7-F-Tangent-to-a-Circle" class="headerlink" title="CGL_7_F:Tangent to a Circle"></a>CGL_7_F:Tangent to a Circle</h3><p>过一个点做圆的切线<br>根据半径和圆心到点的距离求出夹角,旋转角度,得到交点</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;point, point&gt; guodian_yuan_qiedian(cirles a, point p) <span class="comment">//过一点做圆的切线求切点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> l = changdu(a.o - p);</span><br><span class="line">    <span class="keyword">double</span> t = <span class="built_in">asin</span>(a.r / l);</span><br><span class="line">    <span class="keyword">double</span> lb = l * <span class="built_in">cos</span>(t);</span><br><span class="line">    vec x = a.o - p;</span><br><span class="line">    x = x / l * lb;</span><br><span class="line">    <span class="keyword">return</span> make_pair(p + xiangliang_xuanzhuan(x, t), p + xiangliang_xuanzhuan(x, -t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-7-G-Common-Tangent"><a href="#CGL-7-G-Common-Tangent" class="headerlink" title="CGL_7_G:Common Tangent"></a>CGL_7_G:Common Tangent</h3><p>求两个圆的公切线<br>根据圆和圆的位置进行判断</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yuanyuan_gongqiexian</span><span class="params">(cirles a, cirles b, point* u, point* v)</span> <span class="comment">//求圆和圆公切线以及切线个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.r &lt; b.r) &#123;</span><br><span class="line">        swap(a, b);</span><br><span class="line">        swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> l = changdu(a.o - b.o);</span><br><span class="line">    <span class="keyword">double</span> rdiff = a.r - b.r;</span><br><span class="line">    <span class="keyword">double</span> rsum = a.r + b.r;</span><br><span class="line">    <span class="keyword">if</span> (zhengfu(l - rdiff) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> base = <span class="built_in">atan2</span>((b.o - a.o).y, (b.o - a.o).x);</span><br><span class="line">    <span class="keyword">if</span> (zhengfu(l) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (zhengfu(l - rdiff) == <span class="number">0</span>) &#123;</span><br><span class="line">        u[cnt] = v[cnt] = a.Point(base);</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> ang = <span class="built_in">acos</span>((a.r - b.r) / l);</span><br><span class="line">    u[cnt] = a.Point(base + ang);</span><br><span class="line">    v[cnt] = b.Point(base + ang);</span><br><span class="line">    cnt++;</span><br><span class="line">    u[cnt] = a.Point(base - ang);</span><br><span class="line">    v[cnt] = b.Point(base - ang);</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span> (zhengfu(l - rsum) == <span class="number">0</span>) &#123;</span><br><span class="line">        u[cnt] = v[cnt] = a.Point(base);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(l - rsum) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> ang = <span class="built_in">acos</span>((a.r + b.r) / l);</span><br><span class="line">        u[cnt] = a.Point(base + ang);</span><br><span class="line">        v[cnt] = b.Point(pi + base + ang);</span><br><span class="line">        cnt++;</span><br><span class="line">        u[cnt] = a.Point(base - ang);</span><br><span class="line">        v[cnt] = b.Point(pi + base - ang);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="CGL-7-H-Intersection-of-a-Circle-and-a-Polygon"><a href="#CGL-7-H-Intersection-of-a-Circle-and-a-Polygon" class="headerlink" title="CGL_7_H:Intersection of a Circle and a Polygon"></a>CGL_7_H:Intersection of a Circle and a Polygon</h3><p>求多边形和圆相交的面积<br>将多边形的边的顶点与圆心连接行成三角形.<br>那么面积便是三角形在圆内的有向面积.<br>对每个三角形在圆内进行判断来计算.</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">point <span class="title">zhixian_zhixian_jiaodian</span><span class="params">(Line l1, Line l2)</span> <span class="comment">//两直线交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t = ((l1.a.x - l2.a.x) * (l2.a.y - l2.b.y) - (l1.a.y - l2.a.y) * (l2.a.x - l2.b.x)) / ((l1.a.x - l1.b.x) * (l2.a.y - l2.b.y) - (l1.a.y - l1.b.y) * (l2.a.x - l2.b.x));</span><br><span class="line">    <span class="keyword">return</span> l1.a + (l1.b - l1.a) * t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">point <span class="title">xianduan_duandian_dian</span><span class="params">(point p, Segment l)</span> <span class="comment">//线段距离点p最近的端点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point t = p;</span><br><span class="line">    t.x += l.a.y - l.b.y;</span><br><span class="line">    t.y += l.b.x - l.a.x;</span><br><span class="line">    <span class="keyword">if</span> (chaji(l.a - p, t - p) * chaji(l.b - p, t - p) &gt; eps)</span><br><span class="line">        <span class="keyword">return</span> changdu(p - l.a) &lt; changdu(p - l.b) ? l.a : l.b;</span><br><span class="line">    <span class="keyword">return</span> zhixian_zhixian_jiaodian(Line(p, t), l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distp</span><span class="params">(Line l)</span> <span class="comment">//长度的平方</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (l.a.x - l.b.x) * (l.a.x - l.b.x) + (l.a.y - l.b.y) * (l.a.y - l.b.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">yuanxin_dian_sanjiao</span><span class="params">(Line l, cirles c)</span> <span class="comment">//求圆心与两点所成三角形有向面积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sign = <span class="number">1.0</span>;</span><br><span class="line">    l.a = l.a - c.o;</span><br><span class="line">    l.b = l.b - c.o;</span><br><span class="line">    c.o = point(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(chaji(l.a - c.o, l.b - c.o)) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (distp(Line(l.a, c.o)) &gt; distp(Line(l.b, c.o))) &#123;</span><br><span class="line">        swap(l.a, l.b);</span><br><span class="line">        sign = <span class="number">-1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (distp(Line(l.a, c.o)) &lt; c.r * c.r + eps) &#123; <span class="comment">//a在圆内</span></span><br><span class="line">        <span class="keyword">if</span> (distp(Line(l.b, c.o)) &lt; c.r * c.r + eps) <span class="comment">//b也在圆内,返回叉积/2</span></span><br><span class="line">            <span class="keyword">return</span> chaji(l.a - c.o, l.b - c.o) / <span class="number">2.0</span> * sign;</span><br><span class="line">        point p1, p2;</span><br><span class="line">        pair&lt;point, point&gt; q = zhixian_yuan_jiaodian(l, c); <span class="comment">//oa和ob与圆的交点</span></span><br><span class="line">        p1 = q.first;</span><br><span class="line">        p2 = q.second;</span><br><span class="line">        <span class="keyword">if</span> (changdu(p1 - l.b) &gt; changdu(p2 - l.b))</span><br><span class="line">            swap(p1, p2);</span><br><span class="line">        <span class="keyword">double</span> ret1 = <span class="built_in">fabs</span>(chaji(l.a - c.o, p1 - c.o));</span><br><span class="line">        <span class="keyword">double</span> ret2 = <span class="built_in">acos</span>((p1.x * l.b.x + p1.y * l.b.y) / changdu(p1) / changdu(l.b)) * c.r * c.r;</span><br><span class="line">        <span class="keyword">double</span> ret = (ret1 + ret2) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (chaji(l.a - c.o, l.b - c.o) &lt; eps &amp;&amp; sign &gt; <span class="number">0.0</span> || chaji(l.a - c.o, l.b - c.o) &gt; eps &amp;&amp; sign &lt; <span class="number">0.0</span>)</span><br><span class="line">            ret = -ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    point ins = xianduan_duandian_dian(c.o, l);</span><br><span class="line">    <span class="keyword">if</span> (distp(Line(c.o, ins)) &gt; c.r * c.r - eps) &#123;</span><br><span class="line">        <span class="keyword">double</span> ret = <span class="built_in">acos</span>((l.a.x * l.b.x + l.a.y * l.b.y) / changdu(l.a) / changdu(l.b)) * c.r * c.r / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (chaji(l.a - c.o, l.b - c.o) &lt; eps &amp;&amp; sign &gt; <span class="number">0.0</span> || chaji(l.a - c.o, l.b - c.o) &gt; eps &amp;&amp; sign &lt; <span class="number">0.0</span>)</span><br><span class="line">            ret = -ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    point p1, p2;</span><br><span class="line">    pair&lt;point, point&gt; q = zhixian_yuan_jiaodian(l, c); <span class="comment">//oa和ob与圆的交点</span></span><br><span class="line">    p1 = q.first;</span><br><span class="line">    p2 = q.second;</span><br><span class="line">    <span class="keyword">double</span> cm = c.r / (changdu(c.o - l.a) - c.r);</span><br><span class="line">    point m = point((c.o.x + cm * l.a.x) / (<span class="number">1</span> + cm), (c.o.y + cm * l.a.y) / (<span class="number">1</span> + cm));</span><br><span class="line">    <span class="keyword">double</span> cn = c.r / (changdu(c.o - l.b) - c.r);</span><br><span class="line">    point n = point((c.o.x + cn * l.b.x) / (<span class="number">1</span> + cn), (c.o.y + cn * l.b.y) / (<span class="number">1</span> + cn));</span><br><span class="line">    <span class="keyword">double</span> ret1 = <span class="built_in">acos</span>((m.x * n.x + m.y * n.y) / changdu(m) / changdu(n)) * c.r * c.r;</span><br><span class="line">    <span class="keyword">double</span> ret2 = <span class="built_in">acos</span>((p1.x * p2.x + p1.y * p2.y) / changdu(p1) / changdu(p2)) * c.r * c.r - <span class="built_in">fabs</span>(chaji(p1 - c.o, p2 - c.o));</span><br><span class="line">    <span class="keyword">double</span> ret = (ret1 - ret2) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (chaji(l.a - c.o, l.b - c.o) &lt; eps &amp;&amp; sign &gt; <span class="number">0.0</span> || chaji(l.a - c.o, l.b - c.o) &gt; eps &amp;&amp; sign &lt; <span class="number">0.0</span>)</span><br><span class="line">        ret = -ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">duobianxing_yuan_xiangjiao</span><span class="params">(cirles c, point p[], <span class="keyword">int</span> n)</span> <span class="comment">//多边形与圆相交面积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        sum += yuanxin_dian_sanjiao(Line(p[i], p[i + <span class="number">1</span>]), c);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><h3 id="辛普森法则"><a href="#辛普森法则" class="headerlink" title="辛普森法则"></a>辛普森法则</h3><p>证明待补</p><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> x)</span><span class="comment">//原积分函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r)</span>   <span class="comment">//辛普森法则</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> mid=(l+r)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">return</span> (fun(l)+fun(r)+<span class="number">4</span>*fun(mid))*(r-l)/<span class="number">6.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> l,<span class="keyword">double</span> r,<span class="keyword">double</span> ans)</span>  <span class="comment">//调整精度求答案</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">double</span> mid=(l+r)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">double</span> ls=simpson(l,mid),rs=simpson(mid,r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(ls+rs-ans)&lt;=<span class="number">15.0</span>*eps)</span><br><span class="line">        <span class="keyword">return</span> ls+rs+(ls+rs-ans)/<span class="number">15.0</span>;</span><br><span class="line">    <span class="keyword">return</span> solve(l,mid,ls)+solve(mid,r,rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="最小圆覆盖"><a href="#最小圆覆盖" class="headerlink" title="最小圆覆盖"></a>最小圆覆盖</h3><div><div class="fold_hider"><div class="close hider_title">代码内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">point <span class="title">zhixian_zhixian_jiaodian</span><span class="params">(Line l1, Line l2)</span> <span class="comment">//两直线交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t = ((l1.a.x - l2.a.x) * (l2.a.y - l2.b.y) - (l1.a.y - l2.a.y) * (l2.a.x - l2.b.x)) / ((l1.a.x - l1.b.x) * (l2.a.y - l2.b.y) - (l1.a.y - l1.b.y) * (l2.a.x - l2.b.x));</span><br><span class="line">    <span class="keyword">return</span> l1.a + (l1.b - l1.a) * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">sanjiaoxing_waixin</span><span class="params">(point a, point b, point c)</span> <span class="comment">//三角形外心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Line u, v;</span><br><span class="line">    u.a.x = (a.x + b.x) / <span class="number">2</span>;</span><br><span class="line">    u.a.y = (a.y + b.y) / <span class="number">2</span>;</span><br><span class="line">    u.b.x = u.a.x - a.y + b.y;</span><br><span class="line">    u.b.y = u.a.y + a.x - b.x;</span><br><span class="line">    v.a.x = (a.x + c.x) / <span class="number">2</span>;</span><br><span class="line">    v.a.y = (a.y + c.y) / <span class="number">2</span>;</span><br><span class="line">    v.b.x = v.a.x - a.y + c.y;</span><br><span class="line">    v.b.y = v.a.y + a.x - c.x;</span><br><span class="line">    <span class="keyword">return</span> zhixian_zhixian_jiaodian(u, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">cirles <span class="title">zuixiaoyuan_fugai</span><span class="params">(point p[], <span class="keyword">int</span> n)</span>  <span class="comment">//最小圆覆盖</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    random_shuffle(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    <span class="function">cirles <span class="title">c</span><span class="params">(p[<span class="number">1</span>], <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(changdu(c.o - p[i]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            c = cirles(p[i], <span class="number">0.0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">                <span class="keyword">if</span> (zhengfu(changdu(c.o - p[j]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    c.o = (p[i] + p[j]) / <span class="number">2</span>;</span><br><span class="line">                    c.r = changdu(c.o - p[i]);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; j; k++)</span><br><span class="line">                        <span class="keyword">if</span> (zhengfu(changdu(c.o - p[k]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            c.o = sanjiaoxing_waixin(p[i], p[j], p[k]);</span><br><span class="line">                            c.r = changdu(c.o - p[i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/08/28/AOJ-CGL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>acm2014-I.The Queen’s Super-circular Patio</title>
      <link>https://haijeng.github.io/2019/08/13/acm2014-I/</link>
      <guid>https://haijeng.github.io/2019/08/13/acm2014-I/</guid>
      <pubDate>Tue, 13 Aug 2019 09:16:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;I-The-Queen’s-Super-circular-Patio&quot;&gt;&lt;a href=&quot;#I-The-Queen’s-Super-circular-Patio&quot; class=&quot;headerlink&quot; title=&quot;I: The Queen’s Super-cir
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="I-The-Queen’s-Super-circular-Patio"><a href="#I-The-Queen’s-Super-circular-Patio" class="headerlink" title="I: The Queen’s Super-circular Patio"></a>I: The Queen’s Super-circular Patio</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>The queen wishes to build a patio paved with of a circular center stone surrounded by circular rings of circular stones. All the stones in a ring will be the same size with the same number of stones in each ring. The stones in the innermost ring will be placed touching (tangent to) the adjacent stones in the ring and the central stone. The stones in the other rings will touch the two adjacent stones in the next inner ring and their neighbors in the same ring. The figures below depict a patio with one ring of three stones and a patio with $5$ rings of $11$ stones. The patio is to be surrounded by a fence that goes around the outermost stones and straight between them (the heavier line in the figures).<br><img src="https://i.loli.net/2019/08/13/p1ZoRkhv3g4q8Js.png" alt="1.png"><br>The queen does not yet know how many stones there will be in each circle nor how many circles of stones there will be. To be prepared for whatever she decides, write a program to calculate the sizes of the stones in each circle and the length of the surrounding fence. The radius of the central stone is to be one queenly foot.</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>The first line of input contains a single integer $P$, ($1 ≤ P ≤ 1000$), which is the number of data sets that follow. Each data set should be processed identically and independently.<br>Each data set consists of a single line of input. It contains the data set number, $K$, the number, $N$ ($3 ≤ N ≤ 20$), of stsones in each circle and the number, $M$ ($1 ≤ M ≤ 15$), of circles of stones around the central stone.</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>For each data set there is a single line of output. It contains the data set number, $K$, followed by a single space which is then followed by the radius (in queenly feet) of the stones in the outermost ring (to $3$ decimal places) which is followed by a single space which is then followed by the length (in queenly feet) of the fence (to $3$ decimal places).</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3<br>1 3 1<br>2 7 3<br>3 11 5</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1 6.464 79.400<br>2 3.834 77.760<br>3 2.916 82.481</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>$t$组数据,第一个是编号,第二个是一层有几个,第三个是有几层.<br>问你最外层的圆的半径$r$和围栏长度$l$.<br>首先,最外围的围栏长度$l$必定是最外围$1$个圆的周长$+n\times 2\times$最外围圆的半径$r$.<br>那么问题变为如何求最外围圆的半径$r$.<br>对于第一个图,很明显,最外层,即第一层的半径为$\frac{\sin\theta}{(1.0 - \sin\theta)}$,这里$\theta=\frac{\pi}{n}$<br>就像这样,理解一下.<br><img src="https://i.loli.net/2019/08/13/eFuOpMBEdR9g3Wy.png" alt="2.png"><br>我们改一下图,让第二个图只有两层<br>那么问题变为如何求$r_2$.<br>我们连接两球的圆心,外切圆和外切圆的外切圆<br><img src="https://i.loli.net/2019/08/13/nGv8fPaVhHTseRN.png" alt="4.png"></p><p>由$r_1=R_1\times\sin\theta,r_2=R_2\times\sin\theta$我们可以得到一个公式:<br><img src="https://i.loli.net/2019/08/13/qu4ZM5I9Lbdca3t.png" alt="5.png"><br>一系列化简得到</p><p><img src="https://i.loli.net/2019/08/13/MeEpfnVZWm3kwqS.png" alt="6.png"></p><p>$$r_2=R_2*\sin\theta$$</p><p>之后每个$R_i=f(i-1)$递推求得.</p><div><div class="fold_hider"><div class="close hider_title">代码如下</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">double</span> alpha = pi / (<span class="keyword">double</span>)n;</span><br><span class="line">        <span class="keyword">double</span> si=<span class="built_in">sin</span>(alpha),ci=<span class="built_in">cos</span>(alpha),ti=<span class="built_in">tan</span>(alpha);</span><br><span class="line">        <span class="keyword">double</span> r1 = si / (<span class="number">1.0</span> - si);</span><br><span class="line">        <span class="keyword">double</span> R1=<span class="number">1.0</span>+r1,R2,r2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            R2=R1*ci+r1*si+<span class="built_in">sqrt</span>(r1*r1+<span class="number">2</span>*r1*R1*ci*si);</span><br><span class="line">            R2=R2/(ci*ci);</span><br><span class="line"></span><br><span class="line">            r2=R2*si;</span><br><span class="line">            R1=R2;</span><br><span class="line">            r1=r2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> r=r1;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">2.0</span>*r*(pi+(<span class="keyword">double</span>)(n));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %.3f %.3f\n"</span>, opt, r, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/08/13/acm2014-I/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算几何相关知识</title>
      <link>https://haijeng.github.io/2019/08/12/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link>
      <guid>https://haijeng.github.io/2019/08/12/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid>
      <pubDate>Sun, 11 Aug 2019 19:03:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;向量旋转其一&quot;&gt;&lt;a href=&quot;#向量旋转其一&quot; class=&quot;headerlink&quot; title=&quot;向量旋转其一&quot;&gt;&lt;/a&gt;向量旋转其一&lt;/h2&gt;&lt;p&gt;给定点向量$\overrightarrow{A}$,令其按起点旋转一个角度$\alpha$&lt;br&gt;问终点的位
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="向量旋转其一"><a href="#向量旋转其一" class="headerlink" title="向量旋转其一"></a>向量旋转其一</h2><p>给定点向量$\overrightarrow{A}$,令其按起点旋转一个角度$\alpha$<br>问终点的位置.<br>我们定义逆时针为正向.<br>假设,向量$\overrightarrow{A}$终点为$(x,y)$<br>旋转后为$(x’,y’)$.<br>我们可以知道,这个向量的起点为$(0,0)$,终点在$r=\sqrt{x^2+y^2}$为半径得圆上.<br>那么,根据$x=r\cdot cosβ,y=r\cdot sinβ$<br>则旋转后的$x’=r\cdot cos(α+β)$,$y’=r\cdot sin(α+β)$<br>拆开后:<br>$x’=r\cdot cosα\cdot cosβ-r\cdot sinα\cdot sinβ$<br>$y’=r\cdot sinα\cdot cosβ+r\cdot cosα\cdot sinβ$<br>再将$x$和$y$回代得:<br>$x’=cosα\cdot x-sinα\cdot y$<br>$y’=sinα\cdot x+cosα\cdot y$</p>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/08/12/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>凸包的几种求法</title>
      <link>https://haijeng.github.io/2019/08/10/%E5%87%B8%E5%8C%85/</link>
      <guid>https://haijeng.github.io/2019/08/10/%E5%87%B8%E5%8C%85/</guid>
      <pubDate>Sat, 10 Aug 2019 15:37:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;h3 id=&quot;凸包&quot;&gt;&lt;a href=&quot;#凸包&quot; class=&quot;headerlink&quot; title=&quot;凸包&quot;&gt;&lt;/a&gt;凸包&lt;/h
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><blockquote><p>不严谨的话来讲，给定二维平面上的点集，凸包就是将最外层的点连接起来构成的凸多边形，它能包含点集中所有的点。</p></blockquote><p>列如下图:用红色的直线,将黑色的点包裹起来.<br><img src="https://i.loli.net/2019/08/12/3BitWpxf8zhgADZ.png" alt="1.png"></p><h3 id="向量旋转"><a href="#向量旋转" class="headerlink" title="向量旋转"></a>向量旋转</h3><p>定义两个同一起点的向量:<br>分别为向量$\overrightarrow{ab}$和向量$\overrightarrow{ac}$<br><img src="https://i.loli.net/2019/08/12/H7dmyKTBRvlCoFx.png" alt="2.png"><br>定义向量旋转,$\overrightarrow{ab}$旋转为$\overrightarrow{ac}$为右旋,即顺时针旋转.<br>$\overrightarrow{ac}$旋转为$\overrightarrow{ab}$为左旋,即逆时针旋转.<br><strong>如何计算:</strong></p><ul><li>判断向量$\overrightarrow{ab}.x*\overrightarrow{ac}.y-\overrightarrow{ab}.y*\overrightarrow{ac}.x$的值.</li><li>若为正,则为$\overrightarrow{ab}$右旋变为$\overrightarrow{ac}$.</li><li>若为负,则为$\overrightarrow{ab}$左旋变为$\overrightarrow{ac}$.</li><li>若为$0$,则为共线.</li></ul><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><h3 id="前篇"><a href="#前篇" class="headerlink" title="前篇"></a>前篇</h3><p>我们知道,一个凸包,它要包含所有点集中的点.<br>那么如图:<br><img src="https://i.loli.net/2019/08/12/SpX5GoeyDuUNnWK.png" alt="4.png"><br>为了符合凸包定义,只有$1,2,3,4$四点时,我们的凸包如图所示(在这里,我们假设所有的点按照$x$从小到大给出)<br>那么,对于第$5$个点,我们应该怎么处理呢?<br><img src="https://i.loli.net/2019/08/12/RpfvrCs8mDI35kl.png" alt="5.png"></p><ol><li>边$2\rightarrow4$应该断开,然后将$2\rightarrow5$连接</li><li>再将$3\rightarrow4$断开.然后将$3\rightarrow5$连接<br>变成这样:<br><img src="https://i.loli.net/2019/08/12/bO2wZ6Lsi8y7QkH.png" alt="6.png"><br>我们可以简单把这个凸包划分为上半部分和下半部分.</li></ol><ul><li>对于上半部分的$1,2,4,5$<ul><li>为什么断开$2\rightarrow4$而连接$2\rightarrow5$?</li><li>因为$4$在$2\rightarrow5$的内侧?</li><li>这是一个原因,但本质是<ul><li><strong>向量$\overrightarrow{2\rightarrow4}$是需要左旋才能成为$\overrightarrow{2\rightarrow5}$</strong></li></ul></li></ul></li><li>同理可以得到,对于$3\rightarrow4$变$3\rightarrow5$<ul><li><strong>向量$\overrightarrow{3\rightarrow4}$是需要右旋才能成为$\overrightarrow{3\rightarrow5}$</strong></li></ul></li></ul><h3 id="中篇"><a href="#中篇" class="headerlink" title="中篇"></a>中篇</h3><p>由上面得到的这条性质.<br>我们能做什么?</p><ul><li>在离线,所给的点集无序时,我们有了$O(n\log{n})$的算法.</li><li>当所给的点集是有序时,我们有$O(n)$的算法.</li></ul><h3 id="后篇"><a href="#后篇" class="headerlink" title="后篇"></a>后篇</h3><p>我们分为两种类型进行讨论.</p><h4 id="有序的且符合简单多边形的点集"><a href="#有序的且符合简单多边形的点集" class="headerlink" title="有序的且符合简单多边形的点集"></a>有序的且符合简单多边形的点集</h4><ul><li><p>什么是简单多边形?</p><ul><li>顶点与顶点不重合。</li><li>顶点不在边上。</li><li>边与边不相交的多边形。</li></ul></li><li><p>有序是什么?</p><ul><li>按照$X$,$Y$坐标排序的有序</li><li>按照逆时针或顺时针给出的有序,当然也阔以称之为极角排序的有序.</li></ul></li><li><p>首先先看第一种排序,按照逆时针或顺时针给出的有序,(极角排序的有序).</p><ul><li><p><strong>当仁不让$Graham$算法</strong></p><ul><li>算法思路:<ul><li>1.栈名$q$,栈尾指针$tail$,初始化在栈中加入最左下角的点,和第二个点</li><li>2.假设即将加入的点$c$</li><li>3.判断向量$\overrightarrow{q_{tail-1}q_{tail}}$和向量$\overrightarrow{q_{tail-1}c}$的旋转关系.<ul><li>1).如果是$\overrightarrow{q_{tail-1}q_{tail}}$右旋变为$\overrightarrow{q_{tail-1}c}$,将栈顶元素$q_{tail}$弹出,进行步骤$3$,直到进行步骤$2)$不成立或栈内只剩$2$个元素.</li><li>2).如果是$\overrightarrow{q_{tail-1}q_{tail}}$左旋变为$\overrightarrow{q_{tail-1}c}$,将$c$压入栈,回到步骤$2$.</li></ul></li></ul></li><li>如果发现三点共线的情况，算法可以考虑将其视为左转或者右转。这取决于究竟只是要求凸包的边界，还是要找到在凸包边界上所有的点。</li><li>示意图:<img src="https://i.loli.net/2019/08/12/OE27JzWA6MYadQg.png" alt="8.png"></li></ul></li><li><p><strong>被大家吹的很厉害的$Melkman$算法</strong></p><ul><li><p>援引一下$Melkman$在论文中说的:</p></li><li><blockquote><p>It is the purpose of this short article to show that a slightly modified version of their algorithm constructs, on-line, the convex hull of any simple polyline in $O(n)$ time.</p></blockquote></li><li><p>在论文中,$Melkman$使用的是:顺时针.</p></li><li><p>当然,逆时针也阔以.</p></li><li><p>算法思路:</p><ul><li>根据简单多边形的性质,我们知道边和边是不相交的.</li><li>1.确立一条边,使其他所有的点都在这条边的一侧</li><li>2.在一个双端队列的队尾放入边的两点,</li><li>3.再在队列头和尾都放入第三个点.</li><li>4.依次读入每一个点$p$,并与$q_{tail},q_{tail-1},q_{head},q_{head+1}$比较.<ul><li>1).如果是$\overrightarrow{q_{tail-1}q_{tail}}$右旋变为$\overrightarrow{q_{tail-1}p}$,将队尾元素$q_{tail}$弹出,进行步骤$4$,直到进行步骤$1)$不成立或栈内只剩$3$个元素.</li><li>2).如果是$\overrightarrow{q_{tail-1}q_{tail}}$左旋变为$\overrightarrow{q_{tail-1}c}$,将$c$压入队尾,回到步骤$3$.</li><li>3).如果是$\overrightarrow{q_{head+1}q_{head}}$右旋变为$\overrightarrow{q_{head+1}p}$,将队首元素$q_{head}$弹出,进行步骤$4$,直到进行步骤$3)$不成立或队内只剩$3$个元素.</li><li>4).如果是$\overrightarrow{q_{head+1}q_{head}}$左旋变为$\overrightarrow{q_{head+1}p}$,将$p$压入队尾,回到步骤$3$.</li></ul></li></ul></li><li><p><img src="https://i.loli.net/2019/08/12/V3Ap1XEbxsMYJyi.gif" alt="9.gif"></p></li><li><p>我们来进一步理解这个算法</p><ul><li>看图<img src="https://i.loli.net/2019/08/12/LTC9qvoOfEl7Imh.png" alt="11.png"></li><li>因为所给的点是有序的,那么点只能落在$I,II,III$这三个位置.<ul><li>在这里,我们的$q[head]$和$q[tail]$都是$3$.</li><li>加入点$4$便判断,在$I$,那么$head++$,然后压入$4$</li><li>若在$III$,那么$tail–$,压入$4$.</li><li>若在$II$,则$head++,tail–$,再分别压入$4$.</li><li>重复上述步骤,直到所有点遍历结束.</li></ul></li></ul></li></ul></li></ul></li><li><p>对于数据是按$x$从小到大,$x$相等时$y$从小到大的排列的点集</p><ul><li><strong>升级版的$Graham$算法:$Andrew$算法</strong><ul><li>当使用极角排序时的精度丢失又是一个折磨人的事情.</li><li>对于$Graham$算法,对于判断三点共线时有可能出现错误:<img src="https://i.loli.net/2019/08/12/bhfEeDyGActY2rN.png" alt="7.png"></li><li>算法思路:<ul><li>我们结合$Graham$来看.</li><li>在$Andrew$算法中,数据要按照$x$坐标来排列.</li><li>之后,先从点$1$扫到$n$,按照$Gramham$的处理,得到上凸包</li><li>再从$n$扫到$1$,得到下凸包,结束.</li></ul></li><li><img src="https://i.loli.net/2019/08/12/KbRWQIzTlF37uda.gif" alt="10.gif"></li></ul></li></ul></li></ul><h4 id="无序的点集"><a href="#无序的点集" class="headerlink" title="无序的点集"></a>无序的点集</h4><p>其实理解了上面有序的点集如何求解,无序的点集也就非常明了了.<br>对于:$Graham$算法和$Melkman$算法,我们需要按照极角排序.<br>对于:$Andrew$算法,我们要按照$x$从小到大的顺序排列.<br>也就是说,目前,据我所知,对于无序的点集,我们都需要$O(n\log n)$的时间寻找凸包.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="Graham-算法"><a href="#Graham-算法" class="headerlink" title="$Graham$算法"></a>$Graham$算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(vec A, vec B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x; <span class="comment">// 正为A-&gt;B左旋</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">side</span><span class="params">(vec a, vec b, vec p)</span> <span class="comment">// 祖父点a,父点b,新增儿子点p</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec A = vec(b.x - a.x, b.y - a.y); <span class="comment">// 向量ab</span></span><br><span class="line">    vec B = vec(p.x - a.x, p.y - a.y); <span class="comment">// 向量ap</span></span><br><span class="line">    <span class="keyword">return</span> Cross(A, B);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Graham</span><span class="params">(<span class="keyword">int</span>&amp; tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (p[i].y &lt; p[zz].y || (p[i].y == p[zz].y &amp;&amp; p[zz].x &gt; p[i].x))</span><br><span class="line">            zz = i;</span><br><span class="line">    swap(p[<span class="number">0</span>], p[zz]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p[i] = p[i] - p[<span class="number">0</span>];</span><br><span class="line">        p[i].p = <span class="built_in">atan2</span>(p[i].y, p[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">0</span>].x = p[<span class="number">0</span>].y = <span class="number">0</span>;</span><br><span class="line">    sort(p + <span class="number">1</span>, p + n);</span><br><span class="line"></span><br><span class="line">    q[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">    tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail&gt;<span class="number">0</span> &amp;&amp; side(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Andrew-算法"><a href="#Andrew-算法" class="headerlink" title="$Andrew$算法"></a>$Andrew$算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(vec A, vec B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x; <span class="comment">//正为A-&gt;B左旋</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">side</span><span class="params">(vec a, vec b, vec p)</span> <span class="comment">//祖父点a,父点b,新增儿子点p</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec A = vec(b.x - a.x, b.y - a.y, <span class="number">0</span>); <span class="comment">//向量ab</span></span><br><span class="line">    vec B = vec(p.x - a.x, p.y - a.y, <span class="number">0</span>); <span class="comment">//向量ap</span></span><br><span class="line">    <span class="keyword">return</span> Cross(A, B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Andrew</span><span class="params">(<span class="keyword">int</span>&amp; tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(p, p + n);</span><br><span class="line">    tail = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; <span class="number">0</span> &amp;&amp; side(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> basic = tail;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; basic &amp;&amp; side(q[tail - <span class="number">1</span>], q[tail], p[i]) &lt; <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        q[++tail] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/08/10/%E5%87%B8%E5%8C%85/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
