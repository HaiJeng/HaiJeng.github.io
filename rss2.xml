<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kyons&#39;Blog</title>
    <link>https://haijeng.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>自闭在校大学生一枚,欢迎交流.</description>
    <pubDate>Mon, 16 Sep 2019 04:30:56 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JSOI2018 战争</title>
      <link>https://haijeng.github.io/2019/09/16/JSOI2018-%E6%88%98%E4%BA%89/</link>
      <guid>https://haijeng.github.io/2019/09/16/JSOI2018-%E6%88%98%E4%BA%89/</guid>
      <pubDate>Mon, 16 Sep 2019 04:05:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;大意&quot;&gt;&lt;a href=&quot;#大意&quot; class=&quot;headerlink&quot; title=&quot;大意&quot;&gt;&lt;/a&gt;大意&lt;/h2&gt;&lt;p&gt;为了阻止战争,你就是,天选之人~~&lt;/p&gt;
&lt;h2 id=&quot;解析&quot;&gt;&lt;a href=&quot;#解析&quot; class=&quot;headerlink&quot; tit
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="大意"><a href="#大意" class="headerlink" title="大意"></a>大意</h2><p>为了阻止战争,你就是,天选之人~~</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>假设$a\in A,b\in B$,存在向量$w$,使得$b+w=a$,那么根据闵可夫斯基差,可以得到$A-B=\{w\rvert w+B\subseteq A\}$<br>当然,解题都是怎么方便怎么来,我们直接将$B$取反,然后和$A$求个闵可夫斯基和就完事了.<br>最后再判断所给点在不在C里,就完事了<br>哦,要对$A,B$进行一次求凸包,去掉边上的点<br>然后再对$C$求一次.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div><div class="fold_hider"><div class="close hider_title">代码戳我戳我</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">vec</span>;</span> <span class="comment">//向量vec</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> <span class="comment">//点的基本数据结构</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">double</span> poe;</span><br><span class="line">    point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>)</span><br><span class="line">        : x(_x)</span><br><span class="line">        , y(_y)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span> <span class="comment">//向量模长的平方</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span> <span class="comment">//点积</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * i_T.x + y * i_T.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span>^(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span> <span class="comment">//叉积</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * i_T.y - y * i_T.x;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * u, y * u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == i_T.x &amp;&amp; y == i_T.y;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x / u, y / u);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + i_T.x, y + i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x - i_T.x, y - i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point a, point b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fabs</span>(a.y - b.y) &lt; eps ? a.x &lt; b.x : a.y &lt; b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">atn2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        poe = <span class="built_in">atan2</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a.x &lt;&lt; ' ' &lt;&lt; a.y;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.0f %.0f"</span>, a.x, a.y);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;a.x, &amp;a.y);</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bijiao</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vec a, vec b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bijiao(a.poe, b.poe) == <span class="number">0</span> ? (a ^ b) &gt;= <span class="number">0</span> : a.poe &lt; b.poe;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">xuanzhuan</span><span class="params">(vec a, vec b, vec c)</span> <span class="comment">//求三点叉积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b - a) ^ (c - a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Andrew</span><span class="params">(<span class="keyword">int</span>&amp; tail, point cl[], <span class="keyword">int</span> n, point ql[])</span> <span class="comment">//求凸包</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(cl + <span class="number">1</span>, cl + <span class="number">1</span> + n);</span><br><span class="line">    tail = <span class="number">1</span>;</span><br><span class="line">    ql[<span class="number">1</span>] = cl[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; <span class="number">1</span> &amp;&amp; xuanzhuan(ql[tail - <span class="number">1</span>], ql[tail], cl[i]) &lt;= <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        ql[++tail] = cl[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> basic = tail;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt; basic &amp;&amp; xuanzhuan(ql[tail - <span class="number">1</span>], ql[tail], cl[i]) &lt;= <span class="number">0</span>)</span><br><span class="line">            tail--;</span><br><span class="line">        ql[++tail] = cl[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Minkefusiji</span><span class="params">(point s[], <span class="keyword">int</span>&amp; cnt, point pl1[], <span class="keyword">int</span> tail1, point pl2[], <span class="keyword">int</span> tail2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[cnt = <span class="number">1</span>] = pl1[<span class="number">1</span>] + pl2[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail1; i++)</span><br><span class="line">        pl1[i] = pl1[i + <span class="number">1</span>] - pl1[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail2; i++)</span><br><span class="line">        pl2[i] = pl2[i + <span class="number">1</span>] - pl2[i];</span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">1</span>, a2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a1 &lt;= tail1 &amp;&amp; a2 &lt;= tail2) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">if</span> ((pl1[a1] ^ pl2[a2]) &gt;= <span class="number">0</span>)</span><br><span class="line">            s[cnt] = s[cnt - <span class="number">1</span>] + pl1[a1++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s[cnt] = s[cnt - <span class="number">1</span>] + pl2[a2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (a1 &lt;= tail1)</span><br><span class="line">        ++cnt, s[cnt] = s[cnt - <span class="number">1</span>] + pl1[a1++];</span><br><span class="line">    <span class="keyword">while</span> (a2 &lt;= tail2)</span><br><span class="line">        ++cnt, s[cnt] = s[cnt - <span class="number">1</span>] + pl2[a2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(point A, point B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (A ^ B) &gt; <span class="number">0</span> || ((A ^ B) == <span class="number">0</span> &amp;&amp; A.len() &lt; B.len());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dian_in_tubao</span><span class="params">(point a, point p[], <span class="keyword">int</span> tail)</span>    <span class="comment">//包含边界</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((a ^ p[<span class="number">1</span>]) &gt; <span class="number">0</span> || (p[tail] ^ a) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> ps = lower_bound(p + <span class="number">1</span>, p + tail + <span class="number">1</span>, a, cmp2) - p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ((a - p[ps]) ^ (p[ps % tail + <span class="number">1</span>] - p[ps])) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">point p[MAXN], q2[MAXN], q1[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    <span class="keyword">int</span> tail1;</span><br><span class="line">    Andrew(tail1, p, m, q1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        p[i].x = -p[i].x, p[i].y = -p[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tail2;</span><br><span class="line">    Andrew(tail2, p, n, q2);</span><br><span class="line">    tail1--, tail2--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt, tail;</span><br><span class="line">    Minkefusiji(p, cnt, q1, tail1, q2, tail2);</span><br><span class="line"></span><br><span class="line">    Andrew(tail, p, cnt, q1);</span><br><span class="line">    tail--;</span><br><span class="line">    point bs = q1[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail; i++)</span><br><span class="line">        q1[i] = q1[i] - bs;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        point pi;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pi;</span><br><span class="line">        <span class="keyword">if</span> (dian_in_tubao(pi - bs, q1, tail))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/09/16/JSOI2018-%E6%88%98%E4%BA%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>闵可夫斯基和</title>
      <link>https://haijeng.github.io/2019/09/16/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/</link>
      <guid>https://haijeng.github.io/2019/09/16/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/</guid>
      <pubDate>Mon, 16 Sep 2019 03:16:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;什么是闵可夫斯基和?&lt;br&gt;两个凸包$A$,$B$,那么他们的和$A+B=C$,其中,对于$C$中的每个坐标,都有$(x_C,y_C)=(x
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>什么是闵可夫斯基和?<br>两个凸包$A$,$B$,那么他们的和$A+B=C$,其中,对于$C$中的每个坐标,都有$(x_C,y_C)=(x_A+x_B,y_A+y_B)$.<br>定义为:<br>$A+B=\{a+b\rvert a\in A,b\in B\}$<br>最暴力的解法,便是对$A$中每一个点,都加一遍$B$中的点,复杂度为$O(n*m)$<br>图呢,长这样:<br><img src="https://i.loli.net/2019/09/16/cFJjqxNblYyLgXz.png" alt="1.png"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>咋出来的啊?<br>将$B$按照,从原点到凸包$A$中每个点的向量为方向,移动出来的.<br>啥??其实长这样:<br><img src="https://i.loli.net/2019/09/16/RK87sa1tv5ncdlN.png" alt="2.png"><br>显然,一个凸包内的向量应该是无穷的.<del>我懒得画了</del><br>将$B$按照如图的向量进行移动,就得到了我们要的$C$<br>但是这显然是不可行的.<br>我们用肉眼观察法,可以知道,这个$C$是由$A$和$B$的边逆时针首尾相接而成的.这样的话,只需要全领出来,然后接起来就完事了.<br>就是这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Minkefusiji</span><span class="params">(point s[], <span class="keyword">int</span>&amp; cnt, point pl1[], <span class="keyword">int</span> tail1, point pl2[], <span class="keyword">int</span> tail2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[cnt = <span class="number">1</span>] = pl1[<span class="number">1</span>] + pl2[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail1; i++)</span><br><span class="line">        pl1[i] = pl1[i + <span class="number">1</span>] - pl1[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail2; i++)</span><br><span class="line">        pl2[i] = pl2[i + <span class="number">1</span>] - pl2[i];</span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">1</span>, a2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a1 &lt;= tail1 &amp;&amp; a2 &lt;= tail2) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">if</span> ((pl1[a1] ^ pl2[a2]) &gt;= <span class="number">0</span>)   <span class="comment">//叉积</span></span><br><span class="line">            s[cnt] = s[cnt - <span class="number">1</span>] + pl1[a1++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s[cnt] = s[cnt - <span class="number">1</span>] + pl2[a2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (a1 &lt;= tail1)</span><br><span class="line">        ++cnt, s[cnt] = s[cnt - <span class="number">1</span>] + pl1[a1++];</span><br><span class="line">    <span class="keyword">while</span> (a2 &lt;= tail2)</span><br><span class="line">        ++cnt, s[cnt] = s[cnt - <span class="number">1</span>] + pl2[a2++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么做的?</p><ul><li>首先,起点应是两个凸包最左下角的点的和.</li><li>其次,我们将每个凸包的边改为向量</li><li>每次和$S[cnt-1]$相加,及在求得的凸包上接边,得到下一个边的终点.</li><li>对于两个凸包,我们要选择更优的,及叉积的判断.</li><li>最后,我们再对所得集合进行一次求凸包,就结束了</li></ul><h2 id="例题推荐"><a href="#例题推荐" class="headerlink" title="例题推荐"></a>例题推荐</h2><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2564" target="_blank" rel="noopener">bzoj 2564集合的面积</a><br><a href="https://www.luogu.org/problem/P4557" target="_blank" rel="noopener">JSOI2018战争</a></p><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>对于$A-B$,这个等式是这么写的$A-B=\{c\rvert c+B\subseteq A\}$<br>我们称其为闵可夫斯基差<br><del>当然,取反这个骚操作,还是更好用</del></p>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/09/16/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>小凸想跑步-半平面交</title>
      <link>https://haijeng.github.io/2019/09/13/%E5%B0%8F%E5%87%B8%E6%83%B3%E8%B7%91%E6%AD%A5/</link>
      <guid>https://haijeng.github.io/2019/09/13/%E5%B0%8F%E5%87%B8%E6%83%B3%E8%B7%91%E6%AD%A5/</guid>
      <pubDate>Fri, 13 Sep 2019 07:52:21 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;在一个凸包里,找一个点$p$,使得该点与$\{k,k+1,k\in(1,n-1)\}$组成的三角形面积大于和$\{0,1\}
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>在一个凸包里,找一个点$p$,使得该点与$\{k,k+1,k\in(1,n-1)\}$组成的三角形面积大于和$\{0,1\}$组成的三角形面积.</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>首先,我们考虑点的取值范围.<br>必定在凸包内以及凸包的边界上.<br>用<del>线性规划</del>半平面交表示即为:每个边所在直线的左半边区域交集.<br>再考虑,三角形面积关系:<br>$\overrightarrow{(x_1-x,y_1-y)}\times\overrightarrow{(x_0-x,y_0-y)}\leq\overrightarrow{(x_{k+1}-x,y_{k+1}-y)}\times\overrightarrow{(x_k-x,y_k-y)}$<br>然后一堆化简整理之后:<br>$(y_1-y_0-y_{k+1}+y_k)x+(x_0-x_1-x_k+x_{k+1})y+(x_1y_0-x_0y_1-x_{k+1}y_k+x_ky_{k+1})\ge 0$<br>一个形如$ax+by+c\ge 0$的式子就写出来了.<br>对于一个形如上述的式子,该直线的向量为$(b,-a)$,根据这个就可以用两点式表示直线.<br>然后对于$k\in\{1,n-1\}$的点,都求一次直线.<br>再与上面的直线求半平面交.得到符合条件的解即可.</p><div><div class="fold_hider"><div class="close hider_title">代码戳我戳我</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">vec</span>;</span> <span class="comment">//向量vec</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> <span class="comment">//点的基本数据结构</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">double</span> poe;</span><br><span class="line">    point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>)</span><br><span class="line">        : x(_x)</span><br><span class="line">        , y(_y)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * i_T.x, y * i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * u, y * u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> point&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == i_T.x &amp;&amp; y == i_T.y;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x / u, y / u);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + i_T.x, y + i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="keyword">const</span> point&amp; i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x - i_T.x, y - i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point a, point b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.y == b.y ? a.x &lt; b.x : a.y &lt; b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">atn2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        poe = <span class="built_in">atan2</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a.x &lt;&lt; ' ' &lt;&lt; a.y;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f %.2f"</span>, a.x, a.y);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;a.x, &amp;a.y);</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Line</span> <span class="title">Segment</span>;</span> <span class="comment">//线段Segment</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span> <span class="comment">//直线</span></span><br><span class="line">    point a, b;</span><br><span class="line">    <span class="keyword">double</span> poe;</span><br><span class="line">    Line(point _a = point(), point _b = point())</span><br><span class="line">        : a(_a)</span><br><span class="line">        , b(_b)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Line&amp; i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a == i_T.a &amp;&amp; b == i_T.b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, Line&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a.a &gt;&gt; a.b;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Line&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        out &lt;&lt; a.a &lt;&lt; <span class="string">' '</span> &lt;&lt; a.b;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">atn2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        poe = <span class="built_in">atan2</span>(b.y - a.y, b.x - a.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">chaji</span><span class="params">(vec A, vec B)</span> <span class="comment">//求向量叉积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x; <span class="comment">// 正为A-&gt;B左旋</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhengfu</span><span class="params">(<span class="keyword">double</span> d)</span> <span class="comment">//判断正负</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(d) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bijiao</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Line l1, Line l2)</span> <span class="comment">//半平面交的极角排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bijiao(l1.poe, l2.poe) == <span class="number">0</span> ? zhengfu(chaji(l1.b - l1.a, l2.b - l1.a)) &gt; <span class="number">0</span> : l1.poe &lt; l2.poe;</span><br><span class="line">&#125;</span><br><span class="line">point p[MAXN];</span><br><span class="line">Line l[MAXN], q[MAXN];</span><br><span class="line"><span class="function">point <span class="title">zhixian_zhixian_jiaodian</span><span class="params">(Line l1, Line l2)</span> <span class="comment">//两直线交点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t = ((l1.a.x - l2.a.x) * (l2.a.y - l2.b.y) - (l1.a.y - l2.a.y) * (l2.a.x - l2.b.x)) / ((l1.a.x - l1.b.x) * (l2.a.y - l2.b.y) - (l1.a.y - l1.b.y) * (l2.a.x - l2.b.x));</span><br><span class="line">    <span class="keyword">return</span> l1.a + (l1.b - l1.a) * t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">duobianxingmianji</span><span class="params">(point po[], <span class="keyword">int</span> num)</span> <span class="comment">//多边形面积</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    po[num + <span class="number">1</span>] = po[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">        ans += chaji(po[i], po[i + <span class="number">1</span>]);</span><br><span class="line">    ans = <span class="built_in">fabs</span>(ans) * <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> head, <span class="keyword">int</span> tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    q[tail + <span class="number">1</span>] = q[head];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt;= tail; i++)</span><br><span class="line">        p[++num] = zhixian_zhixian_jiaodian(q[i], q[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> duobianxingmianji(p, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(Line a, Line b, Line c)</span> <span class="comment">//判断a,b交点是否在c的右边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point o = zhixian_zhixian_jiaodian(a, b);</span><br><span class="line">    <span class="keyword">return</span> zhengfu(chaji(c.b - c.a, o - c.a)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">banpingmian_jiao</span><span class="params">(<span class="keyword">int</span>&amp; head, <span class="keyword">int</span>&amp; tail, Line L[], <span class="keyword">int</span> t)</span> <span class="comment">//求半平面交</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(L + <span class="number">1</span>, L + t + <span class="number">1</span>, cmp);</span><br><span class="line">    head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bijiao(L[i].poe, L[i + <span class="number">1</span>].poe) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        L[++cnt] = L[i]; <span class="comment">//因为排过序，即使极角相同，后面的也比前面的优</span></span><br><span class="line">    &#125;</span><br><span class="line">    L[++cnt] = L[t];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[tail - <span class="number">1</span>], q[tail], L[i]))</span><br><span class="line">            tail--;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[head + <span class="number">1</span>], q[head], L[i]))</span><br><span class="line">            head++;</span><br><span class="line">        q[++tail] = L[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[tail - <span class="number">1</span>], q[tail], q[head]))</span><br><span class="line">        tail--;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[head + <span class="number">1</span>], q[head], q[tail]))</span><br><span class="line">        head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    p[n + <span class="number">1</span>] = p[<span class="number">1</span>];</span><br><span class="line">    ans=duobianxingmianji(p,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        l[i] = Line(p[i], p[i + <span class="number">1</span>]);</span><br><span class="line">        l[i].atn2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> a = (p[<span class="number">2</span>] - p[<span class="number">1</span>] - p[i + <span class="number">1</span>] + p[i]).y;</span><br><span class="line">        <span class="keyword">double</span> b = (p[<span class="number">1</span>] - p[<span class="number">2</span>] - p[i] + p[i + <span class="number">1</span>]).x;</span><br><span class="line">        <span class="keyword">double</span> c = p[<span class="number">2</span>].x * p[<span class="number">1</span>].y - p[<span class="number">1</span>].x * p[<span class="number">2</span>].y - p[i + <span class="number">1</span>].x * p[i].y + p[i].x * p[i + <span class="number">1</span>].y;</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(a) == zhengfu(b) &amp;&amp; zhengfu(a) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(a)!=<span class="number">0</span>) &#123;</span><br><span class="line">            l[++t] = Line(point(-c / a, <span class="number">0</span>), point(-c / a + b, -a));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zhengfu(b)!=<span class="number">0</span>) &#123;</span><br><span class="line">            l[++t] = Line(point(<span class="number">0</span>, -c / b), point(b, -c / b - a));</span><br><span class="line">        &#125;</span><br><span class="line">        l[t].atn2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> head, tail;</span><br><span class="line">    banpingmian_jiao(head, tail, l, t);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.4f\n"</span>, solve(head, tail)/ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/09/13/%E5%B0%8F%E5%87%B8%E6%83%B3%E8%B7%91%E6%AD%A5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>半平面交</title>
      <link>https://haijeng.github.io/2019/09/13/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/</link>
      <guid>https://haijeng.github.io/2019/09/13/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/</guid>
      <pubDate>Fri, 13 Sep 2019 07:13:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;首先是定义&quot;&gt;&lt;a href=&quot;#首先是定义&quot; class=&quot;headerlink&quot; title=&quot;首先是定义&quot;&gt;&lt;/a&gt;首先是定义&lt;/h3&gt;&lt;blockquote&gt;
    &lt;p&gt;
    一条直线和直线的一侧称为一个半平面。&lt;br&gt;半平面是一个点集，因此是一条
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="首先是定义"><a href="#首先是定义" class="headerlink" title="首先是定义"></a>首先是定义</h3><blockquote>    <p>    一条直线和直线的一侧称为一个半平面。<br>半平面是一个点集，因此是一条直线和直线的一侧构成的点集。当包含直线时，称为闭半平面；当不包含直线时，称为开半平面。    </p></blockquote><p>一般来讲,都写成$ax+by+c\ge 0$.<br>是不是很眼熟,线性规划记得不,<del>还有各种鬼畜应用题</del>.用来求$(x,y)$的取值范围.<br>然后半平面交呢….就是把一堆半平面的交集求出来,就是半平面交了.<br>$\begin{cases}<br>a_1x+b_1y+c_1\ge 0\\<br>a_2x+b_2y+c_2\ge 0\\<br>…<br>\end{cases}$<br>昂,就这样子,画画图,就发现是个线性规划问题了…</p><p><strong>哦,还有多边形的核</strong><br>定义是:</p><blockquote>    如果一个点集中的点与多边形上任意一点的连线与多边形没有其他交点，那么这个点集被称为多边形的核。</blockquote><p>然后求解也很简单,也是半平面交,以逆时针方向为正方向,将多边形每个边看成$ax+by+c\ge 0$,求一下交集,就是答案.</p><h3 id="如何求解"><a href="#如何求解" class="headerlink" title="如何求解"></a>如何求解</h3><p>两种方法,一种分治,一种排序增量法,叫$S\&amp;I$算法好像.<br>当然,工具人只学简单的2333.</p><ul><li>我们以逆时针为正方向,半平面为向量方向的左手.</li><li>维护一个双端队列</li><li>加入一个直线,就判断$tail-1$和$tail$的交点在该直线的哪边.<ol><li>在右面,说明$tail$的直线被新加入的直线覆盖了,于是$tail–$</li><li>在左面,不做处理</li></ol></li><li>对于队首元素,进行同样操作.</li><li>放入队列中</li><li>全部遍历结束后,再分别将$\{tail-1,tail,head\}$以及$\{head+1,head,tail\}$这两种情况的三个直线分别判断.</li></ul><div><div class="fold_hider"><div class="close hider_title">代码戳我戳我</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Line l1, Line l2)</span> <span class="comment">//半平面交的极角排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bijiao(l1.poe, l2.poe) == <span class="number">0</span> ? zhengfu(chaji(l1.b - l1.a, l2.b - l1.a)) &gt; <span class="number">0</span> : l1.poe &lt; l2.poe;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(Line a, Line b, Line c)</span> <span class="comment">//判断a,b交点是否在c的右边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point o = zhixian_zhixian_jiaodian(a, b);</span><br><span class="line">    <span class="keyword">return</span> zhengfu(chaji(c.b - c.a, o - c.a)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">banpingmian_jiao</span><span class="params">(<span class="keyword">int</span>&amp; head, <span class="keyword">int</span>&amp; tail, Line L[], <span class="keyword">int</span> t)</span> <span class="comment">//求半平面交</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(L + <span class="number">1</span>, L + t + <span class="number">1</span>, cmp);</span><br><span class="line">    head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bijiao(L[i].poe, L[i + <span class="number">1</span>].poe) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        L[++cnt] = L[i]; <span class="comment">//因为排过序，即使极角相同，后面的也比前面的优</span></span><br><span class="line">    &#125;</span><br><span class="line">    L[++cnt] = L[t];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[tail - <span class="number">1</span>], q[tail], L[i]))</span><br><span class="line">            tail--;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[head + <span class="number">1</span>], q[head], L[i]))</span><br><span class="line">            head++;</span><br><span class="line">        q[++tail] = L[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[tail - <span class="number">1</span>], q[tail], q[head]))</span><br><span class="line">        tail--;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail &amp;&amp; check(q[head + <span class="number">1</span>], q[head], q[tail]))</span><br><span class="line">        head++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="例题推荐"><a href="#例题推荐" class="headerlink" title="例题推荐"></a>例题推荐</h3><ul><li><a href="https://www.luogu.org/problem/P3256" target="_blank" rel="noopener">JLOI2013 赛车</a></li><li><a href="https://www.luogu.org/problem/P4196" target="_blank" rel="noopener">CQOI2006 凸多边形</a></li><li><a href="https://www.luogu.org/problem/P4250" target="_blank" rel="noopener">SCOI2015小凸想跑步</a><ol><li>题解:<a href="https://haijeng.github.io/2019/09/13/%E5%B0%8F%E5%87%B8%E6%83%B3%E8%B7%91%E6%AD%A5/">My blog</a></li></ol></li></ul>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/09/13/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>最小覆盖双圆问题</title>
      <link>https://haijeng.github.io/2019/09/13/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%8F%8C%E5%9C%86%E9%97%AE%E9%A2%98/</link>
      <guid>https://haijeng.github.io/2019/09/13/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%8F%8C%E5%9C%86%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Fri, 13 Sep 2019 05:39:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;前置知识-最小圆覆盖&quot;&gt;&lt;a href=&quot;#前置知识-最小圆覆盖&quot; class=&quot;headerlink&quot; title=&quot;前置知识:最小圆覆盖&quot;&gt;&lt;/a&gt;前置知识:最小圆覆盖&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problem
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前置知识-最小圆覆盖"><a href="#前置知识-最小圆覆盖" class="headerlink" title="前置知识:最小圆覆盖"></a>前置知识:最小圆覆盖</h2><p><a href="https://www.luogu.org/problem/P1742" target="_blank" rel="noopener">洛谷P1742 最小圆覆盖</a><br>&emsp;&emsp;给定平面一定数量的点,找一个最小的圆,将所有点包含进去.<br>&emsp;&emsp;然后,就不记得是哪位大佬提出了一种$O(n)$的解决方式,随机增量法.</p><ol><li>保证数据的随机性,我们使用$random\_shuffle$这个函数</li><li>我们要接受一个定理:如果点$p$不在集合$S$的最小覆盖圆内,那么肯定在$p\cup S$的最小覆盖圆上.</li><li>首先,假设我们已经求出了前$i$个点形成的最小覆盖圆</li><li>如果$i+1$这个点不在$C_i$圆内,那么该$P_{i+1}$必定在$C_{i+1}$上</li><li>那么我们以$P_{i+1}$为圆心,半径为$0$作为起始圆,找到第$j$个点,保证$dis\{i+1,j\}&gt;$当前圆的半径.以这两点为圆$C_{i+1,j}$半径为$dis\{i+1,j\}$,圆心为$\frac{P_{i+1}+P_j}{2}$</li><li>再寻找第三个点不在$C_{i+1,j}$,设为第$k$个点,那么以$i,j,k$三点的圆即可被认为是期望的最小覆盖圆$C_{i+1,j,k}$</li><li>不断重复$3-6$步骤,即可得到答案.</li></ol><p>&emsp;&emsp;体感就是$O(n^3)$的嘛,在数据不随机的情况下,会退化为$O(n^3)$,但在数据完全随机的情况下,预期期望复杂度为$O(n)$.</p><div><div class="fold_hider"><div class="close hider_title">代码戳我戳我</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cirles <span class="title">zuixiaoyuan_fugai</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="comment">//最小圆覆盖</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        s[i] = p[i];</span><br><span class="line"></span><br><span class="line">    random_shuffle(s + l, s + r + <span class="number">1</span>);</span><br><span class="line">    <span class="function">cirles <span class="title">c</span><span class="params">(s[l], <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(sqr(c.o - s[i]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            c = cirles(s[i], <span class="number">0.0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt; i; j++)</span><br><span class="line">                <span class="keyword">if</span> (zhengfu(sqr(c.o - s[j]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    c.o = (s[i] + s[j]) * <span class="number">0.5</span>, c.r = sqr(c.o - s[j]);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; j; k++)</span><br><span class="line">                        <span class="keyword">if</span> (zhengfu(sqr(c.o - s[k]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            c.o = sanjiaoxing_waixin(s[i], s[j], s[k]), c.r = sqr(c.o - s[k]);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="最小覆盖双圆问题"><a href="#最小覆盖双圆问题" class="headerlink" title="最小覆盖双圆问题"></a>最小覆盖双圆问题</h2><p><a href="https://www.luogu.org/problem/P4586" target="_blank" rel="noopener">洛谷P4586 最小覆盖双圆问题</a><br>又是一道考验人类智慧的问题.<br>首先,我们考虑最好情况.及两圆半径相同,均分了两侧的点.<br>如下图:<del>(大概的画画就行啦)</del><br><img src="https://i.loli.net/2019/09/13/rIgvQ8RFxs46tLM.png" alt="1.png"><br>反正就是如何让两边的圆的半径接近相同.<br>很显然的二分,先对两边各做一次最小圆,得到两个圆的半径,我们只需要在大的半径里二分一哈.<br>然后就可以得到答案啦.<br>但是有个问题,划分两个集合的这条线可能是斜的,所以我们还要暴力转角.<br>每次转那么$1°$,转那么$180$次就差不多.<br>转的越多,精度越高,时间越长.(只要相信你自己是欧皇,你就可以不超时又$AC$)</p><div><div class="fold_hider"><div class="close hider_title">代码戳我戳我</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2</span> * <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha = <span class="number">1.0</span> / <span class="number">180</span> * <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">vec</span>;</span> <span class="comment">//向量vec</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> <span class="comment">//点的基本数据结构</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>)</span><br><span class="line">        : x(_x)</span><br><span class="line">        , y(_y)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">const</span> point i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * i_T.x, y * i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x * u, y * u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> point i_T) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x == i_T.x &amp;&amp; y == i_T.y;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="keyword">double</span> u) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x / u, y / u);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(<span class="keyword">const</span> point i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + i_T.x, y + i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="keyword">const</span> point i_T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x - i_T.x, y - i_T.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point a, point b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.x == b.x ? a.y &lt; b.y : a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a.x &lt;&lt; ' ' &lt;&lt; a.y;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8f %.8f"</span>, a.x, a.y);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, point&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;a.x, &amp;a.y);</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cirles</span> &#123;</span></span><br><span class="line">    point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    cirles(point _o = point(), <span class="keyword">double</span> _r = <span class="number">0.0</span>)</span><br><span class="line">        : r(_r)</span><br><span class="line">        , o(_o)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">point <span class="title">Point</span><span class="params">(<span class="keyword">double</span> t)</span> <span class="comment">//圆上任意一点</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point(o.x + r * <span class="built_in">cos</span>(t), o.y + r * <span class="built_in">sin</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, cirles&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        in &gt;&gt; a.o &gt;&gt; a.r;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, cirles&amp; a)</span><br><span class="line">    &#123;</span><br><span class="line">        out &lt;&lt; a.o &lt;&lt; <span class="string">' '</span> &lt;&lt; a.r;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//求圆心</span></span><br><span class="line">point s[MAXN], p[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhengfu</span><span class="params">(<span class="keyword">double</span> d)</span> <span class="comment">//判断正负</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(d) &lt; eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">changdu</span><span class="params">(vec a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(a.x * a.x + a.y * a.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(vec a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * a.x + a.y * a.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">sanjiaoxing_waixin</span><span class="params">(point a, point b, point c)</span> <span class="comment">//三角形外心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> A = a.x * a.x - b.x * b.x + a.y * a.y - b.y * b.y, B = (b.x - a.x) * <span class="number">2</span>, C = (b.y - a.y) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> D = c.x * c.x - b.x * b.x + c.y * c.y - b.y * b.y, E = (b.x - c.x) * <span class="number">2</span>, F = (b.y - c.y) * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> point((D * C - A * F) / (B * F - E * C), (D * B - A * E) / (C * E - F * B));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vec <span class="title">xiangliang_xuanzhuan</span><span class="params">(vec a, <span class="keyword">double</span> k)</span> <span class="comment">//将向量按照起点旋转逆时针k,</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    x = <span class="built_in">cos</span>(k) * a.x - <span class="built_in">sin</span>(k) * a.y;</span><br><span class="line">    y = <span class="built_in">sin</span>(k) * a.x + <span class="built_in">cos</span>(k) * a.y;</span><br><span class="line">    <span class="keyword">return</span> vec(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">zuixiaoyuan_fugai</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> <span class="comment">//最小圆覆盖</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        s[i] = p[i];</span><br><span class="line"></span><br><span class="line">    random_shuffle(s + l, s + r + <span class="number">1</span>);</span><br><span class="line">    <span class="function">cirles <span class="title">c</span><span class="params">(s[l], <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span> (zhengfu(sqr(c.o - s[i]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            c = cirles(s[i], <span class="number">0.0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt; i; j++)</span><br><span class="line">                <span class="keyword">if</span> (zhengfu(sqr(c.o - s[j]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    c.o = (s[i] + s[j]) * <span class="number">0.5</span>, c.r = sqr(c.o - s[j]);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; j; k++)</span><br><span class="line">                        <span class="keyword">if</span> (zhengfu(sqr(c.o - s[k]) - c.r) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            c.o = sanjiaoxing_waixin(s[i], s[j], s[k]), c.r = sqr(c.o - s[k]);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> c.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("txt.txt", "w", stdout);</span></span><br><span class="line">    srand(<span class="number">20030719</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        <span class="keyword">double</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">181</span>; i++) &#123;</span><br><span class="line">            sort(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">double</span> retl = zuixiaoyuan_fugai(<span class="number">1</span>, mid);</span><br><span class="line">                <span class="keyword">double</span> retr = zuixiaoyuan_fugai(mid + <span class="number">1</span>, n);</span><br><span class="line">                <span class="keyword">double</span> tmp = max(retl, retr);</span><br><span class="line">                <span class="keyword">if</span> (retr + retl - tmp &gt; ans)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                ans = min(tmp, ans);</span><br><span class="line">                <span class="keyword">if</span> (retl &gt; retr)</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                p[i] = xiangliang_xuanzhuan(p[i], alpha);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, <span class="built_in">sqrt</span>(ans));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content:encoded>
      
      <comments>https://haijeng.github.io/2019/09/13/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%8F%8C%E5%9C%86%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
